file : lambdas/index.js

63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400  1) /* global fetch */
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400  2) 
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400  3) // Parameters:
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400  4) // body: {
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400  5) //     "lat": "38.907192",
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400  6) //     "lng": "-77.036873"
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400  7) // }
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400  8) // x-api-key with api key as a header
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400  9) 
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 10) // Returns:
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 11) // {
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 12) //     "todaySunrise": "2024-09-30T07:03:46.000Z",
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 13) //     "todaySunset": "2024-09-30T18:55:20.000Z",
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 14) //     "tomorrowSunrise": "2024-10-01T07:04:41.000Z"
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 15) // }
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 16) 
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 17) export const handler = async (event) => {
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 18)   let lat, lng;
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 19) 
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 20)   if (!event.body) {
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 21)     // Works in the AWS test environment
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 22)     lat = event.lat;
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 23)     lng = event.lng;
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 24)   } else {
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 25)     // Works for frontend
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 26)     const body = JSON.parse(event.body);
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 27)     lat = body.lat;
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 28)     lng = body.lng;
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 29)   }
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 30) 
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 31)   // Error if lat, lng is not passed in
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 32)   if (!lat || !lng) {
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 33)     return {
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 34)       statusCode: 400,
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 35)       body: JSON.stringify({
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 36)         error: "Latitude and longitude are required",
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 37)         eventBody: event.body,
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 38)       }),
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 39)     };
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 40)   }
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 41) 
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 42)   try {
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 43)     // Fetch the API and store the JSON
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 44)     const response = await fetch(
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 45)       `https://api.sunrisesunset.io/json?lat=${lat}&lng=${lng}&date_start=today&date_end=tomorrow&time_format=24`
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 46)     );
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 47)     const json = await response.json();
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 48) 
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 49)     // Prepare the response data
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 50)     const todayResults = json.results[0];
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 51)     const tomorrowResults = json.results[1];
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 52) 
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 53)     // Convert today and tomorrow sunrise and sunset times to ISO format
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 54)     const todaySunrise = new Date(
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 55)       `${todayResults.date}T${todayResults.sunrise}Z`
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 56)     ).toISOString();
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 57)     const todaySunset = new Date(
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 58)       `${todayResults.date}T${todayResults.sunset}Z`
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 59)     ).toISOString();
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 60)     const tomorrowSunrise = new Date(
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 61)       `${tomorrowResults.date}T${tomorrowResults.sunrise}Z`
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 62)     ).toISOString();
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 63) 
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 64)     // Put in data into payload variable
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 65)     const payload = {
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 66)       todaySunrise: todaySunrise,
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 67)       todaySunset: todaySunset,
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 68)       tomorrowSunrise: tomorrowSunrise,
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 69)     };
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 70) 
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 71)     return {
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 72)       body: JSON.stringify(payload),
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 73)     };
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 74)   } catch (error) {
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 75)     // Log the error for debugging
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 76)     console.error("Error fetching data:", error);
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 77)     return {
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 78)       statusCode: 500,
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 79)       body: JSON.stringify({ error: "An error occurred while fetching data" }),
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 80)     };
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 81)   }
63bcf1da (Kaylee Bae 2024-09-30 15:05:15 -0400 82) };
