3104d35e (Trishu Patel   2024-09-30 11:26:01 -0400 25)     },
3104d35e (Trishu Patel   2024-09-30 11:26:01 -0400 26)     "plugins": [
3104d35e (Trishu Patel   2024-09-30 11:26:01 -0400 27)       [
3104d35e (Trishu Patel   2024-09-30 11:26:01 -0400 28)         "expo-location",
3104d35e (Trishu Patel   2024-09-30 11:26:01 -0400 29)         {
3104d35e (Trishu Patel   2024-09-30 11:26:01 -0400 30)           "locationWhenInUsePermission": "Allow SolSync to use your location."
3104d35e (Trishu Patel   2024-09-30 11:26:01 -0400 31)         }
3104d35e (Trishu Patel   2024-09-30 11:26:01 -0400 32)       ]
3104d35e (Trishu Patel   2024-09-30 11:26:01 -0400 33)     ]
ebf5117f (Trishu Patel   2024-09-23 14:44:02 -0400  6)     "start": "expo start --tunnel",
ebf5117f (Trishu Patel   2024-09-23 14:44:02 -0400 15)     "@react-native-async-storage/async-storage": "1.23.1",
3104d35e (Trishu Patel   2024-09-30 11:26:01 -0400 19)     "expo-location": "~17.0.1",
ebf5117f (Trishu Patel   2024-09-23 14:44:02 -0400 22)     "firebase": "^10.13.2",
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  1) import { createUserWithEmailAndPassword } from "firebase/auth";
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400  2) import { firebaseAuth, db } from "../../../firebaseConfig";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  3) import { useState } from "react";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  4) import { StyleSheet, View, Text, TextInput, Button } from "react-native";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  5) import useUser from "@/hooks/useUser";
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400  6) import { doc, setDoc } from "firebase/firestore";
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400  7) import {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400  8)   getLastKnownPositionAsync,
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400  9)   requestForegroundPermissionsAsync,
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 10) } from "expo-location";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 11) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 12) export default function SignUp() {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 13)   const [email, setEmail] = useState("");
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 14)   const [password, setPassword] = useState("");
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 15)   const user = useUser();
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 16)   const [error, setError] = useState("");
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 17) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 18)   const signUp = async () => {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 19)     try {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 20)       await createUserWithEmailAndPassword(firebaseAuth, email, password).then(
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 21)         async (cred) => {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 22)           // if permission is granted, get the current location
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 23)           const location = await getLocation();
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 24) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 25)           setDoc(doc(db, "users", cred.user.uid), {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 26)             latitude: location?.latitude || 0,
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 27)             longitude: location?.longitude || 0,
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 28)           });
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 29)         },
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 30)       );
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 31)     } catch (error) {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 32)       if (error instanceof Error) {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 33)         setError(error.message);
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 34)         return;
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 35)       }
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 36)     }
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 37)   };
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 38) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 39)   const getLocation = async (): Promise<
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 40)     undefined | { latitude: number; longitude: number }
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 41)   > => {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 42)     const userLocation = {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 43)       latitude: 0,
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 44)       longitude: 0,
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 45)     };
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 46) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 47)     // request permission for foreground location
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 48)     const { status } = await requestForegroundPermissionsAsync();
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 49) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 50)     // if permission is not granted, set an error and return
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 51)     if (status !== "granted") {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 52)       return;
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 53)     }
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 54) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 55)     // if permission is granted, get the current location
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 56)     const location = await getLastKnownPositionAsync({});
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 57) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 58)     userLocation.latitude = location?.coords.latitude || 0;
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 59)     userLocation.longitude = location?.coords.longitude || 0;
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 60) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 61)     return userLocation;
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 62)   };
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 63) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 64)   return (
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 65)     <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 66)       <Text>Sign up for SolSync</Text>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 67)       <Text>Email</Text>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 68)       <TextInput
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 69)         autoCorrect={false}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 70)         style={styles.input}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 71)         onChangeText={setEmail}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 72)         value={email}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 73)       />
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 74)       <Text>Password</Text>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 75)       <TextInput
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 76)         autoCorrect={false}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 77)         secureTextEntry={true}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 78)         style={styles.input}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 79)         onChangeText={setPassword}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 80)         value={password}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 81)       />
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 82)       <Button title="Sign Up" onPress={signUp} />
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 83)       {user && <Text>Hello, {user?.email}! Thank You for signing up!</Text>}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 84)       {error && <Text>{error}</Text>}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 85)     </View>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 86)   );
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 87) }
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 88) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 89) const styles = StyleSheet.create({
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 90)   input: {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 91)     height: 40,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 92)     width: "70%",
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 93)     marginHorizontal: 12,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 94)     borderWidth: 1,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 95)     padding: 10,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 96)   },
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 97) });
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 33) .env
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  5) import SignUpScreen from "@/screens/SignUpScreen";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  6) import LoginScreen from "@/screens/LoginScreen";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 41)         <Tab.Screen name="Sign Up" component={SignUpScreen} />
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 42)         <Tab.Screen name="Login" component={LoginScreen} />
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 1) module.exports = function (api) {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 4)     presets: ["babel-preset-expo"],
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  1) import { createUserWithEmailAndPassword } from "firebase/auth";
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400  2) import { firebaseAuth, db } from "../../../firebaseConfig";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  3) import { useState } from "react";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  4) import { StyleSheet, View, Text, TextInput, Button } from "react-native";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  5) import useUser from "@/hooks/useUser";
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400  6) import { doc, setDoc } from "firebase/firestore";
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400  7) import {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400  8)   getLastKnownPositionAsync,
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400  9)   requestForegroundPermissionsAsync,
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 10) } from "expo-location";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 11) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 12) export default function SignUp() {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 13)   const [email, setEmail] = useState("");
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 14)   const [password, setPassword] = useState("");
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 15)   const user = useUser();
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 16)   const [error, setError] = useState("");
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 17) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 18)   const signUp = async () => {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 19)     try {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 20)       await createUserWithEmailAndPassword(firebaseAuth, email, password).then(
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 21)         async (cred) => {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 22)           // if permission is granted, get the current location
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 23)           const location = await getLocation();
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 24) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 25)           setDoc(doc(db, "users", cred.user.uid), {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 26)             latitude: location?.latitude || 0,
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 27)             longitude: location?.longitude || 0,
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 28)           });
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 29)         },
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 30)       );
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 31)     } catch (error) {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 32)       if (error instanceof Error) {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 33)         setError(error.message);
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 34)         return;
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 35)       }
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 36)     }
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 37)   };
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 38) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 39)   const getLocation = async (): Promise<
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 40)     undefined | { latitude: number; longitude: number }
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 41)   > => {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 42)     const userLocation = {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 43)       latitude: 0,
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 44)       longitude: 0,
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 45)     };
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 46) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 47)     // request permission for foreground location
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 48)     const { status } = await requestForegroundPermissionsAsync();
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 49) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 50)     // if permission is not granted, set an error and return
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 51)     if (status !== "granted") {
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 52)       return;
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 53)     }
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 54) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 55)     // if permission is granted, get the current location
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 56)     const location = await getLastKnownPositionAsync({});
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 57) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 58)     userLocation.latitude = location?.coords.latitude || 0;
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 59)     userLocation.longitude = location?.coords.longitude || 0;
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 60) 
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 61)     return userLocation;
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 62)   };
3104d35e (Trishu Patel 2024-09-30 11:26:01 -0400 63) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 64)   return (
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 65)     <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 66)       <Text>Sign up for SolSync</Text>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 67)       <Text>Email</Text>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 68)       <TextInput
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 69)         autoCorrect={false}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 70)         style={styles.input}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 71)         onChangeText={setEmail}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 72)         value={email}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 73)       />
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 74)       <Text>Password</Text>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 75)       <TextInput
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 76)         autoCorrect={false}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 77)         secureTextEntry={true}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 78)         style={styles.input}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 79)         onChangeText={setPassword}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 80)         value={password}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 81)       />
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 82)       <Button title="Sign Up" onPress={signUp} />
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 83)       {user && <Text>Hello, {user?.email}! Thank You for signing up!</Text>}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 84)       {error && <Text>{error}</Text>}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 85)     </View>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 86)   );
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 87) }
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 88) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 89) const styles = StyleSheet.create({
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 90)   input: {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 91)     height: 40,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 92)     width: "70%",
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 93)     marginHorizontal: 12,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 94)     borderWidth: 1,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 95)     padding: 10,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 96)   },
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 97) });
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  1) import {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  2)   signInWithEmailAndPassword,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  3)   signOut as firebaseSignOut,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  4) } from "firebase/auth";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  5) import { firebaseAuth } from "../../../firebaseConfig";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  6) import { useState } from "react";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  7) import { StyleSheet, View, Text, TextInput, Button } from "react-native";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  8) import useUser from "@/hooks/useUser";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  9) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 10) export default function Login() {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 11)   const [email, setEmail] = useState("");
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 12)   const [password, setPassword] = useState("");
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 13)   const [error, setError] = useState("");
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 14)   const user = useUser();
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 15) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 16)   const signIn = async () => {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 17)     try {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 18)       await signInWithEmailAndPassword(firebaseAuth, email, password);
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 19)     } catch (error) {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 20)       if (error instanceof Error) {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 21)         setError(error.message);
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 22)       }
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 23)     }
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 24)   };
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 25) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 26)   const signOut = () => {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 27)     firebaseSignOut(firebaseAuth);
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 28)   };
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 29) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 30)   return (
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 31)     <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 32)       {user ? (
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 33)         <>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 34)           <Button title="Sign Out" onPress={signOut} />
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 35)           <Text>Hello, {user.email}! You are logged in!</Text>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 36)         </>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 37)       ) : (
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 38)         <>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 39)           <Text>Login into SolSync</Text>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 40)           <Text>Email</Text>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 41)           <TextInput
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 42)             autoCorrect={false}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 43)             style={styles.input}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 44)             onChangeText={setEmail}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 45)             value={email}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 46)           />
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 47)           <Text>Password</Text>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 48)           <TextInput
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 49)             autoCorrect={false}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 50)             secureTextEntry={true}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 51)             style={styles.input}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 52)             onChangeText={setPassword}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 53)             value={password}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 54)           />
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 55)           <Button title="Login" onPress={signIn} />
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 56)         </>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 57)       )}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 58)       {error && <Text>{error}</Text>}
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 59)     </View>
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 60)   );
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 61) }
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 62) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 63) const styles = StyleSheet.create({
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 64)   input: {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 65)     height: 40,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 66)     width: "70%",
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 67)     marginHorizontal: 12,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 68)     borderWidth: 1,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 69)     padding: 10,
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 70)   },
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 71) });
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  1) import { User, onAuthStateChanged } from "firebase/auth";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  2) import { useEffect, useState } from "react";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  3) import { firebaseAuth } from "../../firebaseConfig";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  4) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  5) const useUser = (): User | undefined => {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  6)   const [user, setUser] = useState<User | undefined>();
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  7) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  8)   useEffect(() => {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400  9)     onAuthStateChanged(firebaseAuth, (user) => {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 10)       setUser(user ? user : undefined);
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 11)     });
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 12)   }, []);
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 13) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 14)   return user;
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 15) };
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 16) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 17) export default useUser;
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 1) import Login from "@/components/Login";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 2) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 3) export default function LoginScreen() {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 4)   return <Login />;
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 5) }
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 1) import SignUp from "@/components/SignUp";
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 2) 
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 3) export default function SignUpScreen() {
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 4)   return <SignUp />;
ebf5117f (Trishu Patel 2024-09-23 14:44:02 -0400 5) }
